<!-- Components/Rows -->
@using Components
@using Wordle.Model
@using Wordle.ViewModel.Classes

@inject GameManager gameManager
@inject StatsCalculation statsCalc

<div class="row comp">    
    @for(int i = 0; i < gameManager.NumberColumns; i++)
    {
        //Set background color of square. b = black; g = green; o = orange
        CssBackground.Add("b");
        <Square RowIndex=@RowIndex ColumnIndex=@i OnRowFinished="RowFinished" CssClasses="@CssBackground[i]" RowRef=@squareRefs/>
    }
@*
    @for(int i = 0; i < 5; i++)
    {
        int sqNumber = i;
        <Square @key=sqNumber @onkeydown=KeyDown/>
    }*@
</div>

<style scoped>
    .row {
        margin: 0 auto;
        background-color: inherit;
        width: 100%;
        height: 100%;
    }
</style>

@code {
    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public EventCallback GoToNextRow{ get; set; }

    [Parameter]
    public EventCallback StatsShown{ get; set; }

    private List<string> CssBackground = new List<string>();

    public ElementReference[] squareRefs = new ElementReference[5];

    private async Task NextRow()
    {
        await GoToNextRow.InvokeAsync();
    }

    private async Task ShowStats()
    {
        await StatsShown.InvokeAsync();
    }

    private async void RowFinished()
    {
        Console.WriteLine("row finished");

        bool correctGuess = true;
        for (int i = 0; i < gameManager.NumberColumns; i++)
        {
            CssBackground[i] = gameManager.CheckLetter(RowIndex, i);
            if (CssBackground[i] != "g")
            {
                correctGuess = false;
            }
        }

        if (correctGuess)
        {
            //TODO
            //Calculate stats
            statsCalc.CalculateStats(correctGuess);

            //show stats
            await ShowStats();
        }
        else
        {

            await NextRow();
        }
    }
}
