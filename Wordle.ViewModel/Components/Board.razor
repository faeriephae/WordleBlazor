<!-- Components/Board -->
@using Wordle.ViewModel.Components
@using Wordle.Model.GameLogic

@inject GameManager gameManager
@inject StatsCalculation statsCalc

<!-- HTML -->
<div class="board">
    @for( int i = 0 ; i < gameManager.NumberRows ; i++ )
    {
        <!-- board's refernce to row -->
        <!-- GoToNextRow & StatsShown parameter only -->
        <Row RowIndex=@i @ref="RowRef" GoToNextRow="NextRow" StatsShown="ShowStats" />
    }
</div>

<div class="KeyBoard">
    <Keyboard />
</div>

<!-- STATS -->
@if( showStats )
{
    <Stats />
}

<!-- STYLE -->
<style scoped>
    .board {
        margin: 0 auto;
        display: grid;
        grid-auto-rows: auto;
        background-color: rgba(19, 19, 19, 0.79);
        padding: 0;
        width: 406px;
        height: 500px;
    }

    .KeyBoard {
        margin: 75px auto;
        display: flex;
        align-items: center;
        flex-direction: column;
        width: 600px;
    }
</style>

<!-- CODE -->
@code {
    private bool showStats = false;
    private int currRow = 0;

    List<Row> RowRefs = new List<Row>();
    Row RowRef
    {
        set { RowRefs.Add( value ); }
    }

    public void ShowStats()
    {
        showStats = true;
    }

    protected async override Task OnAfterRenderAsync( bool firstRender )
    {
        //focus first square on first render
        if( firstRender )
        {
            await RowRefs[ currRow ].squareRefs[ 0 ].FocusAsync();
        }
    }

    private async void NextRow()
    {
        //focus next row as long as not last (?)
        if( currRow < gameManager.NumberRows - 1 )
        {
            await RowRefs[ ++currRow ].squareRefs[ 0 ].FocusAsync();
            gameManager.CurrRow = currRow;
        }
        else
        {
            //Calculate and show stats if all rows have been filled
            statsCalc.CalculateStats( false );
            showStats = true;
        }
    }

    public void RefreshState()
    {
        this.StateHasChanged();
    }
}
