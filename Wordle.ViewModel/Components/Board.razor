<!-- Components/Board -->
@using Wordle.ViewModel.Components

<div class="board">
    <table>
    @for(int i = 0; i < 30; i += 5)
    {        
        <tr>
            @for (int j = 0; j < 5; j++)
            {
                int sqNumber = i + j;
                <td><input type="text" class="input" @onkeypress="@Enter" @ref="Squares[sqNumber]" maxlength="1" onkeydown="return /[a-z]/i.test(event.key)"/></td>
            }
        </tr>        
    }
    </table>
</div>

<style scoped>
    .board {
        margin: 0 auto;
        display: grid;
        grid-auto-rows: auto;
        background-color: rgba(19, 19, 19, 0.79);
        padding: 0;
        /* in px so it doesn't scale */
        width: 400px;
        height: 500px;
    }

    .input {
        height: 100%;
        width: 100%;
        padding: 0;
        background-color: @Color;
        border: none;
        color: white;
        text-align: center;
        text-transform: uppercase;
    }

    .input[type=text]:focus{
        outline: none;
    }

        td {
            border: 1px solid red;
        }
</style>

@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Parameter]
    public string Color { get; set; } = "inherit";

    private ElementReference[] Squares = new ElementReference[30];

    private int currSq = 0;

    private int endOfLine = 4;

    private char[] values = new char[30];

    string word = "HELLO";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Squares[currSq].FocusAsync();
        }
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (currSq == endOfLine && e.Key == "Enter")
        {

            for (int i = endOfLine - 4; i <= currSq; i++){
                Color = "green";
                Console.WriteLine(values[i]);
            }


            Squares[++currSq].FocusAsync();
            endOfLine += 5;
        }
        else if(currSq < 29 && char.IsLetter(Convert.ToChar(e.Key)))
        {
            values[currSq] = Convert.ToChar(e.Key);
            if (currSq != endOfLine)
            {
                Squares[++currSq].FocusAsync();
            }
        }        
    }
}
