<!-- Components/Board -->
@using Wordle.ViewModel.Components
@using Wordle.ViewModel.Classes

@inject GameManager gameManager
@inject StatsCalculation statsCalc

<div class="board">
    @for (int i = 0; i < gameManager.NumberRows; i++)
    {        
        <Row RowIndex=@i @ref="RowRef" GoToNextRow="NextRow" StatsShown="ShowStats" />        
    }
</div>

@if (showStats)
{
    <Stats />
}

<style scoped>
    .board {
        margin: 0 auto;
        display: grid;
        grid-auto-rows: auto;
        background-color: rgba(19, 19, 19, 0.79);
        padding: 0;
        /* in px so it doesn't scale */
        width: 400px;
        height: 500px;
    }
</style>

@code {
    private bool showStats = false;

    private int currRow = 0;

    List<Row> RowRefs = new List<Row>();
    Row RowRef
    {
        set { RowRefs.Add(value); }
    }

    public void ShowStats()
    {
        showStats = true;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RowRefs[currRow].squareRefs[0].FocusAsync();
        }
    }

    private async void NextRow()
    {
        if (currRow < gameManager.NumberRows - 1)
        {
            await RowRefs[++currRow].squareRefs[0].FocusAsync();
        }
        else
        {
            //TODO
            //Calculate and show stats if all rows have been filled
            //throw new NotImplementedException();
            statsCalc.CalculateStats(false);
            showStats = true;
        }
    }

    public void RefreshState()
    {
        this.StateHasChanged();
    }
}
